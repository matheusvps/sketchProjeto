{"ast":null,"code":"import _objectSpread from \"C:/Users/rodri/projetos/sketchProjeto/view/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nfunction samePagination(oldPag, newPag) {\n  for (var prop in newPag) {\n    if (newPag[prop] !== oldPag[prop]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction fixPagination(p) {\n  if (p.page < 1) {\n    p.page = 1;\n  }\n  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {\n    p.rowsPerPage = 0;\n  }\n  return p;\n}\nexport default {\n  props: {\n    pagination: Object,\n    rowsPerPageOptions: {\n      type: Array,\n      \"default\": function _default() {\n        return [5, 7, 10, 15, 20, 25, 50, 0];\n      }\n    }\n  },\n  computed: {\n    computedPagination: function computedPagination() {\n      var pag = this.qListeners['update:pagination'] !== void 0 ? _objectSpread(_objectSpread({}, this.innerPagination), this.pagination) : this.innerPagination;\n      return fixPagination(pag);\n    },\n    firstRowIndex: function firstRowIndex() {\n      var _this$computedPaginat = this.computedPagination,\n        page = _this$computedPaginat.page,\n        rowsPerPage = _this$computedPaginat.rowsPerPage;\n      return (page - 1) * rowsPerPage;\n    },\n    lastRowIndex: function lastRowIndex() {\n      var _this$computedPaginat2 = this.computedPagination,\n        page = _this$computedPaginat2.page,\n        rowsPerPage = _this$computedPaginat2.rowsPerPage;\n      return page * rowsPerPage;\n    },\n    isFirstPage: function isFirstPage() {\n      return this.computedPagination.page === 1;\n    },\n    pagesNumber: function pagesNumber() {\n      return this.computedPagination.rowsPerPage === 0 ? 1 : Math.max(1, Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage));\n    },\n    isLastPage: function isLastPage() {\n      return this.lastRowIndex === 0 ? true : this.computedPagination.page >= this.pagesNumber;\n    },\n    computedRowsPerPageOptions: function computedRowsPerPageOptions() {\n      var _this = this;\n      var opts = this.rowsPerPageOptions.includes(this.innerPagination.rowsPerPage) ? this.rowsPerPageOptions : [this.innerPagination.rowsPerPage].concat(this.rowsPerPageOptions);\n      return opts.map(function (count) {\n        return {\n          label: count === 0 ? _this.$q.lang.table.allRows : '' + count,\n          value: count\n        };\n      });\n    }\n  },\n  watch: {\n    pagesNumber: function pagesNumber(lastPage, oldLastPage) {\n      if (lastPage === oldLastPage) {\n        return;\n      }\n      var currentPage = this.computedPagination.page;\n      if (lastPage && !currentPage) {\n        this.setPagination({\n          page: 1\n        });\n      } else if (lastPage < currentPage) {\n        this.setPagination({\n          page: lastPage\n        });\n      }\n    }\n  },\n  methods: {\n    __sendServerRequest: function __sendServerRequest(pagination) {\n      this.requestServerInteraction({\n        pagination: pagination,\n        filter: this.filter\n      });\n    },\n    setPagination: function setPagination(val, forceServerRequest) {\n      var newPagination = fixPagination(_objectSpread(_objectSpread({}, this.computedPagination), val));\n      if (samePagination(this.computedPagination, newPagination)) {\n        if (this.isServerSide === true && forceServerRequest === true) {\n          this.__sendServerRequest(newPagination);\n        }\n        return;\n      }\n      if (this.isServerSide === true) {\n        this.__sendServerRequest(newPagination);\n        return;\n      }\n      if (this.pagination !== void 0 && this.qListeners['update:pagination'] !== void 0) {\n        this.$emit('update:pagination', newPagination);\n      } else {\n        this.innerPagination = newPagination;\n      }\n    },\n    firstPage: function firstPage() {\n      this.setPagination({\n        page: 1\n      });\n    },\n    prevPage: function prevPage() {\n      var page = this.computedPagination.page;\n      if (page > 1) {\n        this.setPagination({\n          page: page - 1\n        });\n      }\n    },\n    nextPage: function nextPage() {\n      var _this$computedPaginat3 = this.computedPagination,\n        page = _this$computedPaginat3.page,\n        rowsPerPage = _this$computedPaginat3.rowsPerPage;\n      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {\n        this.setPagination({\n          page: page + 1\n        });\n      }\n    },\n    lastPage: function lastPage() {\n      this.setPagination({\n        page: this.pagesNumber\n      });\n    }\n  },\n  created: function created() {\n    if (this.qListeners['update:pagination'] !== void 0) {\n      this.$emit('update:pagination', _objectSpread({}, this.computedPagination));\n    }\n  }\n};","map":{"version":3,"names":["samePagination","oldPag","newPag","prop","fixPagination","p","page","rowsPerPage","props","pagination","Object","rowsPerPageOptions","type","Array","_default","computed","computedPagination","pag","qListeners","_objectSpread","innerPagination","firstRowIndex","_this$computedPaginat","lastRowIndex","_this$computedPaginat2","isFirstPage","pagesNumber","Math","max","ceil","computedRowsNumber","isLastPage","computedRowsPerPageOptions","_this","opts","includes","concat","map","count","label","$q","lang","table","allRows","value","watch","lastPage","oldLastPage","currentPage","setPagination","methods","__sendServerRequest","requestServerInteraction","filter","val","forceServerRequest","newPagination","isServerSide","$emit","firstPage","prevPage","nextPage","_this$computedPaginat3","created"],"sources":["C:/Users/rodri/projetos/sketchProjeto/view/node_modules/quasar/src/components/table/table-pagination.js"],"sourcesContent":["function samePagination (oldPag, newPag) {\n  for (const prop in newPag) {\n    if (newPag[prop] !== oldPag[prop]) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction fixPagination (p) {\n  if (p.page < 1) {\n    p.page = 1\n  }\n  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {\n    p.rowsPerPage = 0\n  }\n  return p\n}\n\nexport default {\n  props: {\n    pagination: Object,\n    rowsPerPageOptions: {\n      type: Array,\n      default: () => [ 5, 7, 10, 15, 20, 25, 50, 0 ]\n    }\n  },\n\n  computed: {\n    computedPagination () {\n      const pag = this.qListeners['update:pagination'] !== void 0\n        ? { ...this.innerPagination, ...this.pagination }\n        : this.innerPagination\n\n      return fixPagination(pag)\n    },\n\n    firstRowIndex () {\n      const { page, rowsPerPage } = this.computedPagination\n      return (page - 1) * rowsPerPage\n    },\n\n    lastRowIndex () {\n      const { page, rowsPerPage } = this.computedPagination\n      return page * rowsPerPage\n    },\n\n    isFirstPage () {\n      return this.computedPagination.page === 1\n    },\n\n    pagesNumber () {\n      return this.computedPagination.rowsPerPage === 0\n        ? 1\n        : Math.max(\n          1,\n          Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage)\n        )\n    },\n\n    isLastPage () {\n      return this.lastRowIndex === 0\n        ? true\n        : this.computedPagination.page >= this.pagesNumber\n    },\n\n    computedRowsPerPageOptions () {\n      const opts = this.rowsPerPageOptions.includes(this.innerPagination.rowsPerPage)\n        ? this.rowsPerPageOptions\n        : [ this.innerPagination.rowsPerPage ].concat(this.rowsPerPageOptions)\n\n      return opts.map(count => ({\n        label: count === 0 ? this.$q.lang.table.allRows : '' + count,\n        value: count\n      }))\n    }\n  },\n\n  watch: {\n    pagesNumber (lastPage, oldLastPage) {\n      if (lastPage === oldLastPage) {\n        return\n      }\n\n      const currentPage = this.computedPagination.page\n      if (lastPage && !currentPage) {\n        this.setPagination({ page: 1 })\n      }\n      else if (lastPage < currentPage) {\n        this.setPagination({ page: lastPage })\n      }\n    }\n  },\n\n  methods: {\n    __sendServerRequest (pagination) {\n      this.requestServerInteraction({\n        pagination,\n        filter: this.filter\n      })\n    },\n\n    setPagination (val, forceServerRequest) {\n      const newPagination = fixPagination({\n        ...this.computedPagination,\n        ...val\n      })\n\n      if (samePagination(this.computedPagination, newPagination)) {\n        if (this.isServerSide === true && forceServerRequest === true) {\n          this.__sendServerRequest(newPagination)\n        }\n        return\n      }\n\n      if (this.isServerSide === true) {\n        this.__sendServerRequest(newPagination)\n        return\n      }\n\n      if (this.pagination !== void 0 && this.qListeners['update:pagination'] !== void 0) {\n        this.$emit('update:pagination', newPagination)\n      }\n      else {\n        this.innerPagination = newPagination\n      }\n    },\n\n    firstPage () {\n      this.setPagination({ page: 1 })\n    },\n\n    prevPage () {\n      const { page } = this.computedPagination\n      if (page > 1) {\n        this.setPagination({ page: page - 1 })\n      }\n    },\n\n    nextPage () {\n      const { page, rowsPerPage } = this.computedPagination\n      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {\n        this.setPagination({ page: page + 1 })\n      }\n    },\n\n    lastPage () {\n      this.setPagination({ page: this.pagesNumber })\n    }\n  },\n\n  created () {\n    if (this.qListeners['update:pagination'] !== void 0) {\n      this.$emit('update:pagination', { ...this.computedPagination })\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}